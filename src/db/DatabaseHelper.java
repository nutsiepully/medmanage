package db;

import java.io.File;
import java.sql.SQLException;

import org.vcs.medmanage.R;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.RuntimeExceptionDao;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;

import entities.Medication;
import entities.Provider;
import entities.RecentResident;
import entities.Resident;
import entities.ResidentMedication;

public class DatabaseHelper extends OrmLiteSqliteOpenHelper {
	public final String TAG = DatabaseHelper.class.getName();
	private static final String DATABASE_NAME = "medManage.db";
	private static final int DATABASE_VERSION = 27;
	
	private Dao<Resident, Integer> residentDao = null;
	private Dao<Medication, Integer> medicationDao = null;
	private Dao<ResidentMedication, Integer> residentMedicationDao = null;
	private Dao<Provider, Integer> providerDao = null;
	private Dao<entities.Log, Integer> logDao = null;
	private Dao<RecentResident, Integer> recentResidentDao = null;
	
	private RuntimeExceptionDao<Resident, Integer> residentRuntimeDao = null;
	private RuntimeExceptionDao<Medication, Integer> medicationRuntimeDao = null;
	private RuntimeExceptionDao<ResidentMedication, Integer> residentMedicationRuntimeDao = null;
	private RuntimeExceptionDao<Provider, Integer> providerRuntimeDao = null;
	private RuntimeExceptionDao<entities.Log, Integer> logRuntimeDao = null;
	private RuntimeExceptionDao<RecentResident, Integer> recentResidentRuntimeDao = null;
	
	/**
	 * This is used to load the Schema from a generated config file. The config
	 * file is in res/raw, and must be generated by running DatabaseConfigUtil 
	 * each time a change is made to an Entity.
	 * @param context
	 */
	public DatabaseHelper(Context context){
		super(context, DATABASE_NAME, null ,DATABASE_VERSION, R.raw.ormlite_config);
	}
	
	@Override
	public void onCreate(SQLiteDatabase db, ConnectionSource connectionSource){
		try{
			Log.i(DatabaseHelper.class.getName(), "onCreate");
			/**
			 * LIST TABLES TO BE CREATED HERE
			 */
			TableUtils.createTable(connectionSource, Resident.class);
			TableUtils.createTable(connectionSource, Medication.class);
			TableUtils.createTable(connectionSource, ResidentMedication.class);
			TableUtils.createTable(connectionSource, Provider.class);
			TableUtils.createTable(connectionSource, entities.Log.class);
			TableUtils.createTable(connectionSource, RecentResident.class);
			
			//Populate the DB with some default data
			populateDefault();
		}catch(Exception e){
			Log.e(DatabaseHelper.class.getName(), "Can't create database", e);
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void onUpgrade(SQLiteDatabase db, ConnectionSource connectionSource, int oldVersion, int newVersion){
		try{
			Log.i(DatabaseHelper.class.getName(), "onUpgrade");
			//Drop the old tables
			TableUtils.dropTable(connectionSource, Resident.class, true);
			TableUtils.dropTable(connectionSource, Medication.class, true);
			TableUtils.dropTable(connectionSource, ResidentMedication.class, true);
			TableUtils.dropTable(connectionSource, Provider.class, true);
			TableUtils.dropTable(connectionSource, entities.Log.class, true);
			TableUtils.dropTable(connectionSource, RecentResident.class, true);
			
			//Recreate old tables
			onCreate(db, connectionSource);
		}catch(SQLException e){
			Log.e(DatabaseHelper.class.getName(), "Can't drop databases on upgrade", e);
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void close(){
		super.close();
		//Close references to entities here
		residentRuntimeDao = null;
		medicationRuntimeDao = null;
		logRuntimeDao = null;
		providerRuntimeDao = null;
		residentMedicationRuntimeDao = null;
		recentResidentRuntimeDao = null;
	}
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//	DEFINE DAOs FOR ALL ENTITITES HERE
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	/**
	 * Creates a Database Access Object for the Resident class (or returns 
	 * cached value).
	 * Not called "getResidentDao" because that caused compile errors upon rename.
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<Resident, Integer> getDao() throws SQLException {
		if(residentDao == null){
			residentDao = getDao(Resident.class);
		}
		return residentDao;
	}

	/**
	 * Creates the RuntimeExceptionDao for Resident.
	 * @return
	 */
	public RuntimeExceptionDao<Resident, Integer> getResidentDataDao(){
		if(residentRuntimeDao == null){
			residentRuntimeDao = getRuntimeExceptionDao(Resident.class);
		}
		return residentRuntimeDao;
	}
	
	/**
	 * Creates a Database Access Object for the Medication class (or returns 
	 * cached value).
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<Medication, Integer> getMedicationDao() throws SQLException {
		if(medicationDao == null){
			medicationDao = getDao(Medication.class);
		}
		return medicationDao;
	}
	
	/**
	 * Creates the RuntimeExceptionDao for Resident.
	 * @return
	 */
	public RuntimeExceptionDao<Medication, Integer> getMedicationDataDao(){
		if(medicationRuntimeDao == null){
			medicationRuntimeDao = getRuntimeExceptionDao(Medication.class);
		}
		return medicationRuntimeDao;
	}
	
	/**
	 * Creates a Database Access Object for the ResidentMedication class (or returns 
	 * cached value).
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<ResidentMedication, Integer> getResidentMedicationDao() throws SQLException {
		if(residentMedicationDao == null){
			residentMedicationDao = getDao(ResidentMedication.class);
		}
		return residentMedicationDao;
	}
	
	/**
	 * Creates the RuntimeExceptionDao for ResidentMedication.
	 * @return
	 */
	public RuntimeExceptionDao<ResidentMedication, Integer> getResidentMedicationDataDao(){
		if(residentMedicationRuntimeDao == null){
			residentMedicationRuntimeDao = getRuntimeExceptionDao(ResidentMedication.class);
		}
		return residentMedicationRuntimeDao;
	}
	
	/**
	 * Creates a Database Access Object for the Provider class (or returns 
	 * cached value).
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<Provider, Integer> getProviderDao() throws SQLException {
		if(providerDao == null){
			providerDao = getDao(Provider.class);
		}
		return providerDao;
	}
	
	/**
	 * Creates the RuntimeExceptionDao for Provider.
	 * @return
	 */
	public RuntimeExceptionDao<Provider, Integer> getProviderDataDao(){
		if(providerRuntimeDao == null){
			providerRuntimeDao = getRuntimeExceptionDao(Provider.class);
		}
		return providerRuntimeDao;
	}
	
	/**
	 * Creates a Database Access Object for the Log class (or returns 
	 * cached value).
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<entities.Log, Integer> getLogDao() throws SQLException {
		if(logDao == null){
			logDao = getDao(entities.Log.class);
		}
		return logDao;
	}
	
	/**
	 * Creates the RuntimeExceptionDao for Log.
	 * @return
	 */
	public RuntimeExceptionDao<entities.Log, Integer> getLogDataDao(){
		if(logRuntimeDao == null){
			logRuntimeDao = getRuntimeExceptionDao(entities.Log.class);
		}
		return logRuntimeDao;
	}
	
	/**
	 * Creates a Database Access Object for the RecentResidentQueue class (or returns 
	 * cached value).
	 * @return
	 * @throws SQLException
	 * @throws java.sql.SQLException 
	 */
	public Dao<RecentResident, Integer> getRecentResidentDao() throws SQLException{
		if(recentResidentDao == null){
			recentResidentDao = getDao(RecentResident.class);
		}
		return recentResidentDao;
	}
	
	/**
	 * Creates the RuntimeExceptionDao for Log.
	 * @return
	 */
	public RuntimeExceptionDao<RecentResident, Integer> getRecentResidentDataDao(){
		if(recentResidentRuntimeDao == null){
			recentResidentRuntimeDao = getRuntimeExceptionDao(RecentResident.class);
		}
		return recentResidentRuntimeDao;
	}
	
	/**
	 * Populates the DB with some default data
	 */
	public void populateDefault(){ 
		Resident resident1 = new Resident();
		Resident resident2 = new Resident();
		Resident resident3 = new Resident();
		Resident resident4 = new Resident();
		
		//Create residents
		resident1.setName("Barbara Velasquez");
		resident1.setGender(true);
		resident1.setNeighborhood("Corridor 1");
		resident1.setAllergies("Peanuts");
		resident1.setPrimaryDiagnosis("Glaucoma");
		resident1.setOtherDiagnoses("Alzheimer's\nParkinsons");
		resident1.setNotes("Pleasant mood today.");
		resident1.setPrefs("No outstanding preferences.");
		resident1.setRecentActions("Joined Vincentian");
		resident1.setRoomNumber(305);
		resident1.setTerm("Short term");
		
		resident2.setName("James Cooper");
		resident2.setGender(false);
		resident2.setNeighborhood("Corridor 2");
		resident2.setAllergies("Asparagus");
		resident2.setPrimaryDiagnosis("Dementia");
		resident2.setOtherDiagnoses("None");
		resident2.setNotes("Can have sudden mood swings.");
		resident2.setPrefs("Prefers pills with apple sauce.");
		resident2.setRecentActions("Took acetomeniphin\nJoined Vincentian");
		resident2.setRoomNumber(211);
		resident2.setTerm("Acute care");
		
		resident3.setName("Patricia Anderson");
		resident3.setGender(true);
		resident3.setNeighborhood("Corridor 3");
		resident3.setAllergies("None.");
		resident3.setPrimaryDiagnosis("Chronic arthritis");
		resident3.setOtherDiagnoses("None");
		resident3.setNotes("Likes to be called Patty.");
		resident3.setPrefs("Prefers pills to be crushed when they can be");
		resident3.setRecentActions("Fell in the tub.\nJoined Vincentian");
		resident3.setRoomNumber(401);
		resident3.setTerm("Short term");
		
		resident4.setName("Jacob Jeffries");
		resident4.setGender(false);
		resident4.setNeighborhood("Corridor 4");
		resident4.setAllergies("None.");
		resident4.setPrimaryDiagnosis("Chronic arthritis");
		resident4.setOtherDiagnoses("None");
		resident4.setNotes("Prefers to be called Jake");
		resident4.setPrefs("Prefers pills to be crushed when they can be");
		resident4.setRecentActions("Pill at 6am\nJoined Vincentian");
		resident4.setRoomNumber(506);
		resident4.setTerm("Short term");
		
		//Create meds
		Medication newMed1 = new Medication();
		newMed1.setName("Excedrin");
		newMed1.setDescription("It's a pill");
		newMed1.setNotes("You gotta take it to eat it.");
		newMed1.setSideEffects("Well, it's not good.");
		newMed1.setWarnings("Careful wid it.");
		newMed1.setTakeWithMeal(true);
		newMed1.setSpecialInstructions("N/A");
		newMed1.setInstructions("Have the resident swallow the pill with water.");
		
		Medication newMed2 = new Medication();
		newMed2.setName("Percoset");
		newMed2.setDescription("Pain Relief");
		newMed2.setNotes("You gotta take it to eat it.");
		newMed2.setSideEffects("Well, it's not good.");
		newMed2.setWarnings("Careful wid it.");
		newMed2.setTakeWithMeal(true);
		newMed2.setSpecialInstructions("Resident should be seated.");
		newMed2.setInstructions("Have the resident swallow the pill with water.");
		
		//Associate meds with Ressys
		ResidentMedication relation1 = new ResidentMedication(newMed1, resident1, "", "0 30 16 1/1 * ? *");
		ResidentMedication relation2 = new ResidentMedication(newMed2, resident1, "", "0 20 9 1/1 * ? *");
		ResidentMedication relation3 = new ResidentMedication(newMed1, resident2, "", "0 30 16 1/1 * ? *");
		ResidentMedication relation4 = new ResidentMedication(newMed2, resident2, "", "0 20 9 1/1 * ? *");

		//Put some recent residents
		RecentResident recent1 = new RecentResident(1, 1);
		RecentResident recent2 = new RecentResident(2, 2);
		
		//Add to DB
		RuntimeExceptionDao<Resident, Integer> dao = getResidentDataDao();
		dao.create(resident1);
		dao.create(resident2);
		dao.create(resident3);
		dao.create(resident4);
		
		getMedicationDataDao().create(newMed1);
		getMedicationDataDao().create(newMed2);
		
		getResidentMedicationDataDao().create(relation1);
		getResidentMedicationDataDao().create(relation2);
		getResidentMedicationDataDao().create(relation3);
		getResidentMedicationDataDao().create(relation4);

		getRecentResidentDataDao().create(recent1);
		getRecentResidentDataDao().create(recent2);
	}
}


